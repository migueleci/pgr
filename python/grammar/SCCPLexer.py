# Generated from python/grammar/SCCP.g4 by ANTLR 4.5.3
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\33")
        buf.write("\u0098\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6")
        buf.write("\3\6\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13")
        buf.write("\3\13\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\17\3")
        buf.write("\17\3\17\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\22")
        buf.write("\3\23\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\26\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27")
        buf.write("\u0084\n\27\3\30\6\30\u0087\n\30\r\30\16\30\u0088\3\31")
        buf.write("\3\31\7\31\u008d\n\31\f\31\16\31\u0090\13\31\3\32\6\32")
        buf.write("\u0093\n\32\r\32\16\32\u0094\3\32\3\32\2\2\33\3\3\5\4")
        buf.write("\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\3\2\6\3\2\62;\3\2C\\\4\2\62;C\\\5\2\13\f\17\17\"\"")
        buf.write("\u009b\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2")
        buf.write("\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2")
        buf.write("\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33")
        buf.write("\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2")
        buf.write("\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2")
        buf.write("\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\3\65\3\2\2\2")
        buf.write("\59\3\2\2\2\7=\3\2\2\2\tB\3\2\2\2\13H\3\2\2\2\rL\3\2\2")
        buf.write("\2\17N\3\2\2\2\21S\3\2\2\2\23U\3\2\2\2\25W\3\2\2\2\27")
        buf.write("[\3\2\2\2\31]\3\2\2\2\33_\3\2\2\2\35b\3\2\2\2\37e\3\2")
        buf.write("\2\2!g\3\2\2\2#j\3\2\2\2%n\3\2\2\2\'p\3\2\2\2)t\3\2\2")
        buf.write("\2+w\3\2\2\2-\u0083\3\2\2\2/\u0086\3\2\2\2\61\u008a\3")
        buf.write("\2\2\2\63\u0092\3\2\2\2\65\66\7x\2\2\66\67\7c\2\2\678")
        buf.write("\7t\2\28\4\3\2\2\29:\7K\2\2:;\7p\2\2;<\7v\2\2<\6\3\2\2")
        buf.write("\2=>\7D\2\2>?\7q\2\2?@\7q\2\2@A\7n\2\2A\b\3\2\2\2BC\7")
        buf.write("d\2\2CD\7g\2\2DE\7i\2\2EF\7k\2\2FG\7p\2\2G\n\3\2\2\2H")
        buf.write("I\7g\2\2IJ\7p\2\2JK\7f\2\2K\f\3\2\2\2LM\7\60\2\2M\16\3")
        buf.write("\2\2\2NO\7v\2\2OP\7g\2\2PQ\7n\2\2QR\7n\2\2R\20\3\2\2\2")
        buf.write("ST\7*\2\2T\22\3\2\2\2UV\7+\2\2V\24\3\2\2\2WX\7c\2\2XY")
        buf.write("\7u\2\2YZ\7m\2\2Z\26\3\2\2\2[\\\7>\2\2\\\30\3\2\2\2]^")
        buf.write("\7@\2\2^\32\3\2\2\2_`\7/\2\2`a\7@\2\2a\34\3\2\2\2bc\7")
        buf.write("~\2\2cd\7~\2\2d\36\3\2\2\2ef\7]\2\2f \3\2\2\2gh\7_\2\2")
        buf.write("hi\7a\2\2i\"\3\2\2\2jk\7c\2\2kl\7p\2\2lm\7f\2\2m$\3\2")
        buf.write("\2\2no\7?\2\2o&\3\2\2\2pq\7?\2\2qr\7\61\2\2rs\7?\2\2s")
        buf.write("(\3\2\2\2tu\7@\2\2uv\7?\2\2v*\3\2\2\2wx\7>\2\2xy\7?\2")
        buf.write("\2y,\3\2\2\2z{\7v\2\2{|\7t\2\2|}\7w\2\2}\u0084\7g\2\2")
        buf.write("~\177\7h\2\2\177\u0080\7c\2\2\u0080\u0081\7n\2\2\u0081")
        buf.write("\u0082\7u\2\2\u0082\u0084\7g\2\2\u0083z\3\2\2\2\u0083")
        buf.write("~\3\2\2\2\u0084.\3\2\2\2\u0085\u0087\t\2\2\2\u0086\u0085")
        buf.write("\3\2\2\2\u0087\u0088\3\2\2\2\u0088\u0086\3\2\2\2\u0088")
        buf.write("\u0089\3\2\2\2\u0089\60\3\2\2\2\u008a\u008e\t\3\2\2\u008b")
        buf.write("\u008d\t\4\2\2\u008c\u008b\3\2\2\2\u008d\u0090\3\2\2\2")
        buf.write("\u008e\u008c\3\2\2\2\u008e\u008f\3\2\2\2\u008f\62\3\2")
        buf.write("\2\2\u0090\u008e\3\2\2\2\u0091\u0093\t\5\2\2\u0092\u0091")
        buf.write("\3\2\2\2\u0093\u0094\3\2\2\2\u0094\u0092\3\2\2\2\u0094")
        buf.write("\u0095\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0097\b\32\2")
        buf.write("\2\u0097\64\3\2\2\2\7\2\u0083\u0088\u008e\u0094\3\b\2")
        buf.write("\2")
        return buf.getvalue()


class SCCPLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    BOOL = 22
    INT = 23
    ID = 24
    WS = 25

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'var'", "'Int'", "'Bool'", "'begin'", "'end'", "'.'", "'tell'", 
            "'('", "')'", "'ask'", "'<'", "'>'", "'->'", "'||'", "'['", 
            "']_'", "'and'", "'='", "'=/='", "'>='", "'<='" ]

    symbolicNames = [ "<INVALID>",
            "BOOL", "INT", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "BOOL", "INT", "ID", "WS" ]

    grammarFileName = "SCCP.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


