load smt.maude

fmod SMT-UTIL is
  pr META-LEVEL .
  inc INTEGER .
  pr CONVERSION .
  op check-sat : Boolean -> Bool .
  op check-unsat : Boolean -> Bool .
  eq check-sat(B:Boolean)
   = metaCheck(['INTEGER], upTerm(B:Boolean)) .
  eq check-unsat(B:Boolean)
   = not(check-sat(B:Boolean)) .
  eq B:Boolean and true
   = B:Boolean .
  eq B:Boolean and false
   = false .
  eq B:Boolean or true
   = true .
  eq B:Boolean or false
   = false .

  eq true and B:Boolean
   = B:Boolean .
  eq false and B:Boolean
   = false .
  eq true or B:Boolean
   = true .
  eq false or B:Boolean
   = false .
   
  ---(
  eq not(true)
   = false .
  eq not(false)
   = true .
  ---)
endfm

fmod AGENT-ID is
  sort Aid .
  pr NAT .
  subsort Nat < Aid .

  op root : -> Aid .
  op _._ : Aid Aid -> Aid [assoc left id: root] .
endfm

fmod SCCP-SYNTAX is
	pr INTEGER .
  pr AGENT-ID .
	sort SCCPCmd .

	op 0 : -> SCCPCmd . 
	op tell_ : Boolean -> SCCPCmd . 
	op ask_->_ : Boolean SCCPCmd -> SCCPCmd .
  op _||_ : SCCPCmd SCCPCmd -> SCCPCmd [assoc gather (e E) ] .
  op {_}[_] : Aid SCCPCmd -> SCCPCmd .
endfm

mod SCCP is
  pr SCCP-SYNTAX .
  inc CONFIGURATION .
  pr SMT-UTIL .

  op o : Nat -> Oid .
  ops process store : -> Cid .
  op cmd:_ : SCCPCmd -> Attribute .
  op const:_ : Boolean -> Attribute .
  op loc:_ : Aid -> Attribute .

  vars L L0 L1 : Aid .
  vars B B0 B1 : Boolean .
  vars C C0 C1 : SCCPCmd .
  vars O O0 O1 : Oid .
  var  AtS     : AttributeSet .

  --- non-observable concurrent transitions
  eq < O : process | (cmd: 0), AtS >
   = none .
  eq < O : store | loc: L, const: B0 > < O : store | loc: L, const: B1 >
   = < O : store | loc: L, const: (B0 and B1) > .

  --- observable concurrent transitions
  rl [tell] :
     < O : store | loc: L, const: B > < O0 : process | loc: L, cmd: (tell B0) >
  => < O : store | loc: L, const: (B and B0) > < O0 : process | loc: L, cmd: 0 > .

 crl [ask] :
     < O : store | loc: L, const: B > < O0 : process | loc: L, cmd: (ask B0 -> C0) >
  => < O : store | loc: L, const: B > < O0 : process | loc: L, cmd: C0 >
  if check-unsat(B and not(B0)) .

  rl [parallel] :
     < O0 : process | loc: L, cmd: (C0 || C1) >
  => < O0 : process | loc: L, cmd: C0 > < O0 : process | loc: L, cmd: C1 > .

  rl [space] :
     < O0 : process | loc: L, cmd: { L0 }[ C0 ] >
  => < O0 : process | loc: L, cmd: 0 > < O0 : process | loc: (L . L0), cmd: C0 > < O0 : store | loc: (L . L0), const: true > .
endm
