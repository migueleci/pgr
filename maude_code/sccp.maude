load smt.maude

fmod AGENT-ID is
  pr LIST{Qid} * (op __ : List{Qid} List{Qid} -> List{Qid} to _._,
                  sort NeList{Qid} to NeAgentId,
                  sort List{Qid} to AgentId
                 ) .
endfm

fmod SMT-UTIL is
  pr META-LEVEL .
  pr INTEGER .
  pr CONVERSION .
  op check-sat : Boolean -> Bool .
  op check-unsat : Boolean -> Bool .
  eq check-sat(B:Boolean)
   = metaCheck(['INTEGER], upTerm(B:Boolean)) .
  eq check-unsat(B:Boolean)
   = not(check-sat(B:Boolean)) .
endfm

fmod CCP-SYNTAX is
	pr INTEGER .
	sort CCPCmd .

	op 0 : -> CCPCmd . 
	op tell_ : Boolean -> CCPCmd . 
	op ask_->_ : Boolean CCPCmd -> CCPCmd .
---a	op _||_ : CCPCmd CCPCmd -> CCPCmd [assoc comm id: 0] .
  op _||_ : CCPCmd CCPCmd -> CCPCmd .
endfm

mod CCP is
  pr CCP-SYNTAX .
  inc CONFIGURATION .
  pr NAT .
  pr SMT-UTIL .

  op o : Nat -> Oid .
  ops process store : -> Cid .
  op cmd:_ : CCPCmd -> Attribute .
  op const:_ : Boolean -> Attribute .

  vars B B0 B1 : Boolean .
  vars C C0 C1 : CCPCmd .
  vars O O0 O1 : Oid .

  --- non-observable concurrent transitions
  eq < O : process | cmd: 0 >
   = none .
   
  --- observable concurrent transitions
  rl [tell] :
     < O : store | const: B > < O0 : process | cmd: tell(B0) >
  => < O : store | const: (B and B0) > < O0 : process | cmd: 0 > .

  rl [parallel] :
     < O0 : process | cmd: (C0 || C1) >
  => < O0 : process | cmd: C0 > < O0 : process | cmd: C1 > .

 crl [ask] :
     < O : store | const: B > < O0 : process | cmd: (ask B0 -> C0) >
  => < O : store | const: B > < O0 : process | cmd: C0 >
  if check-unsat(B and not(B0)) .

endm
